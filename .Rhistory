subset(grinding_inventory.duplicate == FALSE)
# Add the related vials to `selected_samples`
library(janitor)
need_to_wrap <- related_vials %>% dplyr::select("site_date_key", "drop_processing.species_code") %>% unique
wrapping_table_v2 <- need_to_wrap %>% left_join(drop_sample_tracking[c("site_date_key", "drop_processing.species_code", "grinding_inventory.box_code", "grinding_inventory.box_position", "final_vial","grinding_inventory.duplicate")]) %>% subset(grinding_inventory.duplicate == FALSE)  %>% arrange(drop_processing.species_code, site_date_key)
write.csv(wrapping_table_v2, "SP23/wrapping_table_250515.csv", row.names = FALSE)
write.csv(wrapping_table_v2, "C:/Users/hl51981/OneDrive - University of Georgia/Leavitt_Herbert/PFFW/Pt Fourchon Food Webs R Directory/isotope_workflow/sample_selection/selected samples/SP23/wrapping_table_250515.csv", row.names = FALSE)
library(tidyverse)
library(janitor)
library(brms)
brm(
abundance ~ Year + (1 | SampleID),
data = a,
family = zero_inflated_poisson(),
chains = 4, cores = 4, iter = 2000
)
a<-long_data %>% filter(species == "Alpheus heterochaelis")
brm(
abundance ~ Year + (1 | SampleID),
data = a,
family = zero_inflated_poisson(),
chains = 4, cores = 4, iter = 2000
)
pivot_clean<-read.csv("pivot_clean.csv", check.names = FALSE)
sti<-read.csv("STI_results_by_taxon.csv")
setwd("C:/Users/hl51981/OneDrive - University of Georgia/Leavitt_Herbert/PFFW/Manuscripts/Global Change/Revision_repository")
pivot_clean<-read.csv("pivot_clean.csv", check.names = FALSE)
sti<-read.csv("STI_results_by_taxon.csv")
pivot_clean<-read.csv("pivot_clean.csv", check.names = FALSE)
pivot_clean
pivot_clean<-read.csv("pivot_clean.csv", check.names = FALSE)
pivot_clean<-read.csv("pivot_clean.csv", check.names = FALSE)
pivot_clean<-read.csv("pivot_clean.csv", check.names = FALSE)
sti<-read.csv("STI_results_by_taxon.csv")
pivot_clean <- pivot_clean[, names(pivot_clean) != ""]
pivot_clean <- pivot_clean %>%
mutate(Year = ifelse(Year == "2022_2023", 2023, Year))
pivot_clean$Year <- as.numeric(pivot_clean$Year)
# Step 1: Reshape to long format
abund_long <- pivot_clean %>%
pivot_longer(cols = -c(SampleID, Year), names_to = "species", values_to = "abundance")
# Step 2: Calculate mean abundance per year for each species
mean_abund_by_year <- abund_long %>%
group_by(species, Year) %>%
summarise(mean_abund = mean(abundance, na.rm = TRUE), .groups = "drop")
o6 <- cor_results %>% filter(r > .8 & r < 0.9)
o6_ploting <-abund_long %>% filter( species %in% o6$species) %>% group_by(Year, species) %>% summarise(abundance = mean(abundance))
ggplot(data = o6_ploting, aes(x = Year, y = log(abundance+1), colour = species))+
geom_line() +
geom_point()
o6 <- cor_results %>% filter(r > .8 & r < 0.9)
o6 <- cor_results %>% filter(r > .8 & r < 0.9)
# Step 3: Calculate correlation (abundance ~ year) for each species
cor_threshold <- 0.5  # set your threshold
cor_results <- mean_abund_by_year %>%
group_by(species) %>%
summarise(
n_years = n(),
r = ifelse(n_years > 1, cor(Year, mean_abund, use = "complete.obs"), NA_real_),
.groups = "drop"
)
o6 <- cor_results %>% filter(r > .8 & r < 0.9)
o6_ploting <-abund_long %>% filter( species %in% o6$species) %>% group_by(Year, species) %>% summarise(abundance = mean(abundance))
ggplot(data = o6_ploting, aes(x = Year, y = log(abundance+1), colour = species))+
geom_line() +
geom_point()
# Step 4: Determine presence by year (binary)
presence_matrix <- abund_long %>%
mutate(present = ifelse(abundance > 0, 1, 0)) %>%
group_by(species, Year) %>%
summarise(present = max(present), .groups = "drop") %>%
pivot_wider(names_from = Year, values_from = present, values_fill = 0)
# Step 5: Apply logic filters
filter_flags <- presence_matrix %>%
mutate(
pass_presence = (`2016` == 1 & `2006` == 0) |
(`2023` == 1 & `2006` == 0) |
(`2023` == 1 & `2016` == 1 & `2006` == 0)
)
# Step 6: Combine correlation + logical filter
pass_species <- cor_results %>%
left_join(filter_flags, by = "species") %>%
mutate(pass_filter1 = r > cor_threshold | pass_presence) %>%
filter(pass_filter1)
# Output: species passing filter 1
co_migrator_candidates <- pass_species$species
##### Filter 2 #######
co_migrator_sti <- data.frame(species = co_migrator_candidates) %>% left_join(species_STI, by = "species")
co_migrator_filter2 <- co_migrator_sti %>% filter(sti > PtFou_vals)
##### Filter 2 #######
species_STI<-read.csv("STI_results_by_taxon.csv")
co_migrator_sti <- data.frame(species = co_migrator_candidates) %>% left_join(species_STI, by = "species")
co_migrator_filter2 <- co_migrator_sti %>% filter(sti > PtFou_vals)
setwd("C:/Users/hl51981/OneDrive - University of Georgia/Leavitt_Herbert/PFFW/Manuscripts/Global Change/Revision_repository")
zip_files <- list.files("gbif_downloads", pattern = "\\.zip$", full.names = TRUE)
unzipped_base <- "gbif_downloads/unzipped_data"
# Create a folder to extract to
dir.create(unzipped_base, showWarnings = FALSE)
# Unzip all
lapply(zip_files, function(zf) {
unzip(zf, exdir = file.path(unzipped_base, tools::file_path_sans_ext(basename(zf))))
})
# Define base folder containing all unzipped subfolders
# Get a list of all subfolders
subfolders <- list.dirs(unzipped_base, full.names = TRUE, recursive = FALSE)
# For each subfolder, find the first .csv file and read it
gbif_list <- lapply(subfolders, function(subdir) {
csv_file <- list.files(subdir, pattern = "\\.csv$", full.names = TRUE)
if (length(csv_file) == 0) return(NULL)
message("Reading: ", csv_file[1])
tryCatch(
read_delim(csv_file[1], delim = "\t",col_types = cols(.default = "c") ,show_col_types = FALSE),
error = function(e) {
warning("Skipping ", csv_file[1], ": ", e$message)
return(NULL)
}
)
})
# Remove any NULLs from skipped folders
gbif_list <- Filter(Negate(is.null), gbif_list)
# Optional: Combine all data frames
combined_gbif <- do.call(rbind, gbif_list)
levels(as.factor(combined_gbif$species))
# Clean coordinates
occ_clean <- combined_gbif %>%
filter(!is.na(decimalLongitude), !is.na(decimalLatitude)) %>%
distinct(decimalLongitude, decimalLatitude, .keep_all = TRUE) %>%
mutate(across(
c(decimalLatitude, decimalLongitude, coordinateUncertaintyInMeters,
coordinatePrecision, elevation, elevationAccuracy,
depth, depthAccuracy),
~ as.numeric(.)
)) %>% as.data.frame()%>%
mutate( # recomple split out species
species = case_when(
species == "Minuca longisignalis" ~ "Minuca spp.",
species == "Palaemon pugio" ~ "Palaemon spp.",
species == "Palaemon vulgaris" ~ "Palaemon spp.",
species == "Panopeus simpsoni" ~ "Panopeus spp."
species == "Panopeus obesus" ~ "Panopeus spp."
# Clean coordinates
occ_clean <- combined_gbif %>%
filter(!is.na(decimalLongitude), !is.na(decimalLatitude)) %>%
distinct(decimalLongitude, decimalLatitude, .keep_all = TRUE) %>%
mutate(across(
c(decimalLatitude, decimalLongitude, coordinateUncertaintyInMeters,
coordinatePrecision, elevation, elevationAccuracy,
depth, depthAccuracy),
~ as.numeric(.)
)) %>% as.data.frame()%>%
mutate( # recomple split out species
species = case_when(
species == "Minuca longisignalis" ~ "Minuca spp.",
species == "Palaemon pugio" ~ "Palaemon spp.",
species == "Palaemon vulgaris" ~ "Palaemon spp.",
species == "Panopeus simpsoni" ~ "Panopeus spp.",
species == "Panopeus obesus" ~ "Panopeus spp."
TRUE ~ species  # leave all others unchanged
# Clean coordinates
occ_clean <- combined_gbif %>%
filter(!is.na(decimalLongitude), !is.na(decimalLatitude)) %>%
distinct(decimalLongitude, decimalLatitude, .keep_all = TRUE) %>%
mutate(across(
c(decimalLatitude, decimalLongitude, coordinateUncertaintyInMeters,
coordinatePrecision, elevation, elevationAccuracy,
depth, depthAccuracy),
~ as.numeric(.)
)) %>% as.data.frame()%>%
mutate( # recomple split out species
species = case_when(
species == "Minuca longisignalis" ~ "Minuca spp.",
species == "Palaemon pugio" ~ "Palaemon spp.",
species == "Palaemon vulgaris" ~ "Palaemon spp.",
species == "Panopeus simpsoni" ~ "Panopeus spp.",
species == "Panopeus obesus" ~ "Panopeus spp.",
TRUE ~ species  # leave all others unchanged
)
)
coords <- occ_clean %>%
dplyr::select(decimalLongitude, decimalLatitude) %>%
as.matrix()
sp_points <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
library(readr)
library(rgbif)
library(tidyverse)
library(terra)
library(sp)
library(sdmpredictors)
coords <- occ_clean %>%
dplyr::select(decimalLongitude, decimalLatitude) %>%
as.matrix()
sp_points <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
# Extract SST with 5 km buffer
pts <- vect(sp_points, crs = "EPSG:4326")
datasets <- list_datasets(terrestrial = FALSE, marine = TRUE)
layers <- list_layers(datasets)
# Load SST raster
sst_layer <- load_layers("BO_sstmin", equalarea = FALSE)
# Convert raster and points to terra objects
sst_terra <- rast(sst_layer)  # convert from raster::raster to terra::SpatRaster
# Extract SST using a 5 km buffer (terra uses degrees, so ~0.05 is 5km near equator)
occ_clean$sst <- terra::extract(sst_terra, pts, buffer = 0.05, fun = mean)[, 2]
sst_vals <- na.omit(occ_clean$sst)
PtFou_Coords <- data.frame(y = 29.105560, x = -90.194443)
PtFou_vec <- vect(PtFou_Coords, geom = c("x", "y"), crs = "EPSG:4326")
PtFou_vals <- terra::extract(sst_terra, PtFou_vec, buffer = 0.05, fun = mean)[, 2]
##### Filter 2 #######
species_STI<-read.csv("STI_results_by_taxon.csv")
co_migrator_sti <- data.frame(species = co_migrator_candidates) %>% left_join(species_STI, by = "species")
co_migrator_filter2
co_migrator_filter2 <- co_migrator_sti %>% filter(sti > PtFou_vals)
View(co_migrator_filter2)
# Filter 3 ####
# for absences:
# Select relevant columns
target_data <- pivot_clean %>%
select(all_of(c(co_migrator_filter2$species, "Year", "SampleID")))
# Melt the dataset
long_data <- target_data %>%
pivot_longer(cols = all_of(co_migrator_filter2$species), names_to = "species", values_to = "abundance") %>%
mutate(detected = abundance > 0)
samples_per_year <- long_data %>%
distinct(Year, SampleID) %>%
count(Year, name = "sites")
# Estimate average detection probability for each species (when detected)
detection_probs <- long_data %>%
filter(detected) %>%
group_by(species, Year) %>%
summarise(samples_detected = n(), .groups = 'drop') %>%
right_join(samples_per_year, by = "Year") %>%
group_by(species) %>% na.omit() %>%
summarise(detection_prob = mean(samples_detected / sites), .groups = 'drop')
# Merge and calculate P(Undetected | Present)
undetected_probs <- expand.grid(species = co_migrator_filter2$species, Year = unique(long_data$Year)) %>%
left_join(long_data %>% group_by(species, Year) %>% summarise(detected = any(detected), .groups = 'drop'),
by = c("species", "Year")) %>%
left_join(detection_probs, by = "species") %>%
left_join(samples_per_year, by = "Year") %>%
mutate(p_false_absence = ifelse(!detected, (1 - detection_prob)^sites, NA))
# Pivot to wide format
detection_wide <- undetected_probs %>%
pivot_wider(
id_cols = species,
names_from = Year,
values_from = c(detected, p_false_absence),
names_glue = "{Year}_{.value}"
)
# Add joint probability for 2006 and 2016 if undetected in both
detection_wide <- detection_wide %>%
mutate(p_false_absence_2006_2016 = ifelse(
`2006_detected` == FALSE & `2016_detected` == FALSE,
`2006_p_false_absence` * `2016_p_false_absence`,
NA
))
# View results
print(detection_wide)
final_set<-detection_wide %>% filter(if_any(colnames(.[,c(5,7,8)]), ~. < .05))
final_set
View(final_set)
# for increases
consistent_species<-pass_species %>% filter(`2006` == 1 & `2016`== 1 & `2023` == 1)
# Nest by species
species_models <- long_data %>% filter(species %in% consistent_species$species) %>%
group_by(species) %>%
nest() %>%
mutate(
model = map(data, ~ tryCatch(
brm(
abundance ~ year + (1 | site_id),
data = species_data,
family = zero_inflated_poisson(),
chains = 4, cores = 4, iter = 2000
),
error = function(e) NULL
)),
slope = map_dbl(model, ~ if (!is.null(.x)) coef(summary(.x))["year", "Estimate"] else NA),
p_value = map_dbl(model, ~ if (!is.null(.x)) coef(summary(.x))["year", "Pr(>|t|)"] else NA)
)
# Filter significant trends
significant_species <- species_models %>%
filter(!is.na(p_value), p_value < 0.05, slope > 0)  # or slope < 0 for declines
significant_species
species_models
# Nest by species
species_models <- long_data %>% filter(species %in% consistent_species$species) %>%
# Nest by species
species_models <- long_data %>% filter(species %in% consistent_species$species) %>%
# Nest by species
species_models <- long_data %>% filter(species %in% consistent_species$species) %>%
group_by(species) %>%
nest() %>%
mutate(
model = map(data, ~ tryCatch(
brm(
abundance ~ year + (1 | site_id),
family = zero_inflated_poisson(),
chains = 4, cores = 4, iter = 2000
),
error = function(e) NULL
),
slope = map_dbl(model, ~ if (!is.null(.x)) coef(summary(.x))["year", "Estimate"] else NA),
p_value = map_dbl(model, ~ if (!is.null(.x)) coef(summary(.x))["year", "Pr(>|t|)"] else NA)
))
a<-long_data %>% filter(species == "Alpheus heterochaelis")
brm(
abundance ~ Year + (1 | SampleID),
data = a,
family = zero_inflated_poisson(),
chains = 4, cores = 4, iter = 2000
)
brm(
abundance ~ Year + (1 | SampleID),
data = a,
family = zero_inflated_poisson(),
chains = 4, cores = 2, iter = 2000
)
mdl_a<-brm(
abundance ~ Year + (1 | SampleID),
data = a,
family = zero_inflated_poisson(),
chains = 4, cores = 2, iter = 2000
)
mdl_a<-brm(
abundance ~ Year + (1 | SampleID),
data = a,
family = zero_inflated_poisson(),
chains = 4, cores = 4, iter = 4000
)
pairs(mdl_a)
mdl_a<-brm(
abundance ~ Year + (1 | SampleID),
data = a,
family = zero_inflated_negbinomial(),
chains = 4, cores = 4, iter = 4000
)
a$Year_f <- factor(a$Year)
a<-long_data %>% filter(species == "Alpheus heterochaelis")
a$Year_f <- factor(a$Year)
mdl_a<-brm(
abundance ~ Year_f + (1 | SampleID),
data = a,
family = zero_inflated_negbinomial(),
chains = 4, cores = 4, iter = 4000,
control = list(adapt_delta = 0.99)
)
mdl_a
mdl_a<-brm(
abundance ~ Year_f,
data = a,
family = zero_inflated_negbinomial(),
chains = 4, cores = 4, iter = 4000,
control = list(adapt_delta = 0.995)
)
a<-long_data %>% filter(species == "Alpheus heterochaelis")
a$Year_f <- factor(a$Year)
mdl_a<-brm(
abundance ~ Year_f,
data = a,
family = zero_inflated_negbinomial(),
chains = 4, cores = 4, iter = 4000,
control = list(adapt_delta = 0.995)
)
mdl_a<-brm(
abundance ~ Year_f,
data = a,
family = zero_inflated_negbinomial(),
chains = 4, cores = 4, iter = 2500,
control = list(adapt_delta = 0.995)
)
mdl_a
post<-posterior_samples(mdl_a)
?as_draws
brmsfit(mdl_a)
post<-as_draws(mdl_a)
post$diff_2023_2016 <- post$b_Year_f2023 - post$b_Year_f2016
# Probability that abundance in 2023 > 2016
mean(post$diff_2023_2016 > 0)
quantile(post$diff_2023_2016, probs = c(0.025, 0.5, 0.975))
post<-as_draws(mdl_a)
post
post$diff_2023_2016 <- post$b_Year_f2023 - post$b_Year_f2016
post$diff_2023_2016
post$b_Year_f2023
post$b_Year_f2023
post<-as_draws_df(mdl_a)
post$diff_2023_2016 <- post$b_Year_f2023 - post$b_Year_f2016
# Probability that abundance in 2023 > 2016
mean(post$diff_2023_2016 > 0)
quantile(post$diff_2023_2016, probs = c(0.025, 0.5, 0.975))
quantile(post$diff_2023_2016, probs = c(0.05, 0.5, 0.95))
post
mdl_a
mdl_a[3,3:4]
consistent_species
for (species in consistent_species){
a<-long_data %>% filter(species == species)
a$Year_f <- factor(a$Year)
mdl_a<-brm(
abundance ~ Year_f,
data = a,
family = zero_inflated_negbinomial(),
chains = 4, cores = 4, iter = 2500,
control = list(adapt_delta = 0.995)
)
post<-as_draws_df(mdl_a)
# 2016 vs baseline
post$diff_2016_baseline <- post$b_Year_f2016
# 2023 vs baseline
post$diff_2023_baseline <- post$b_Year_f2023
# 2023 vs 2016
post$diff_2023_2016 <- post$b_Year_f2023 - post$b_Year_f2016
print(paste(species, "likelihood of true increase from 2006 to 2016",quantile(post$diff_2016_baseline, c(0.025, 0.5, 0.975))))
print(paste(species, "likelihood of true increase from 2006 to 2023",quantile(post$diff_2023_baseline, c(0.025, 0.5, 0.975))))
print(paste(species, "likelihood of true increase from 2016 to 2023",quantile(post$diff_2023_2016, c(0.025, 0.5, 0.975))
}
for (species in consistent_species){
a<-long_data %>% filter(species == species)
a$Year_f <- factor(a$Year)
mdl_a<-brm(
abundance ~ Year_f,
data = a,
family = zero_inflated_negbinomial(),
chains = 4, cores = 4, iter = 2500,
control = list(adapt_delta = 0.995)
)
post<-as_draws_df(mdl_a)
# 2016 vs baseline
post$diff_2016_baseline <- post$b_Year_f2016
# 2023 vs baseline
post$diff_2023_baseline <- post$b_Year_f2023
# 2023 vs 2016
post$diff_2023_2016 <- post$b_Year_f2023 - post$b_Year_f2016
print(paste(species, "likelihood of true increase from 2006 to 2016",quantile(post$diff_2016_baseline, c(0.025, 0.5, 0.975))))
print(paste(species, "likelihood of true increase from 2006 to 2023",quantile(post$diff_2023_baseline, c(0.025, 0.5, 0.975))))
print(paste(species, "likelihood of true increase from 2016 to 2023",quantile(post$diff_2023_2016, c(0.025, 0.5, 0.975))))
}
list_layers("Salinity")
list_layers()
sdmlayers<-list_layers
sdmlayers<-list_layers()
View(sdmlayers)
quantile(post$diff_2016_baseline, c(0.025, 0.5, 0.975))
print(paste(species, "likelihood of true increase from 2006 to 2016",quantile(post$diff_2016_baseline, c(0.025, 0.5, 0.975))))
print(paste(species, "likelihood of true increase from 2006 to 2016"))
species
quantile(post$diff_2016_baseline, c(0.025, 0.5, 0.975))
# Load SST raster
sst_layer <- load_layers("BO_sstmin", equalarea = FALSE)
sal_layer <- load_laerys("BO_salinity", equalarea = FALSE)
sal_layer <- load_layers("BO_salinity", equalarea = FALSE)
# Convert raster and points to terra objects
sst_terra <- rast(sst_layer)  # convert from raster::raster to terra::SpatRaster
sal_terra <- rast(sal_layer)  # convert from raster::raster to terra::SpatRaster
# Extract SST using a 5 km buffer (terra uses degrees, so ~0.05 is 5km near equator)
occ_clean$sst <- terra::extract(sst_terra, pts, buffer = 0.05, fun = mean)[, 2]
occ_clean$sal <- terra::extract(sal_terra, pts, buffer = 0.05, fun = mean)[, 2]
sst_vals <- na.omit(occ_clean$sst)
sal_vals <- na.omit(occ_clean$sal)
PtFou_Coords <- data.frame(y = 29.105560, x = -90.194443)
PtFou_vec <- vect(PtFou_Coords, geom = c("x", "y"), crs = "EPSG:4326")
PtFou_vals <- terra::extract(sst_terra, PtFou_vec, buffer = 0.05, fun = mean)[, 2]
# recompile split out species
species_STI <- occ_clean %>% drop_na(sst) %>% group_by(species) %>% summarise(sti = mean(sst),
sti_sd = sd(sst), .groups = 'keep')
species_niche_size <- occ_clean %>% drop_na(sst) %>% drop_na(sal) %>% group_by(species) %>% summarise(temp = mean(sst)
temp_2.5 = quantile(sst, 0.025),
species_niche_size <- occ_clean %>% drop_na(sst) %>% drop_na(sal) %>% group_by(species) %>% summarise(temp = mean(sst),
temp_2.5 = quantile(sst, 0.025),
temp_97.5 = quantile(sst, 0.975),
sal = mean(sal),
sal_2.5 = quantile(sal, 0.025),
sal_97.5 = quantile(sal, 0.975),
size = (temp_97.5-temp_2.5)*(sal_97.5-sal_2.5),
.groups = "keep")
View(species_niche_size)
View(occ_clean)
species_niche_size <- occ_clean %>% drop_na(sst) %>% drop_na(sal) %>% group_by(species) %>% summarise(temp_mean = mean(sst),
temp_2.5 = quantile(sst, 0.025),
temp_97.5 = quantile(sst, 0.975),
sal_mean = mean(sal),
sal_2.5 = quantile(sal, 0.025),
sal_97.5 = quantile(sal, 0.975),
size = (temp_97.5-temp_2.5)*(sal_97.5-sal_2.5),
.groups = "keep")
View(species_niche_size)
View(species_niche_size)
species_niche_size <- occ_clean %>% drop_na(sst) %>% drop_na(sal) %>% group_by(species) %>% summarise(temp_mean = mean(sst),
temp_2.5 = quantile(sst, 0.025),
temp_97.5 = quantile(sst, 0.975),
temp_range = (temp_97.5-temp_2.5),
sal_mean = mean(sal),
sal_2.5 = quantile(sal, 0.025),
sal_97.5 = quantile(sal, 0.975),
size = (temp_97.5-temp_2.5)*(sal_97.5-sal_2.5),
.groups = "keep")
View(species_niche_size)
datasets <- list_datasets(terrestrial = TRUE, marine = TRUE)
layers <- list_layers(datasets)
View(layers)
species_niche_size <- occ_clean %>% drop_na(sst) %>% drop_na(sal) %>% group_by(species) %>% summarise(temp_mean = mean(sst),
temp_2.5 = quantile(sst, 0.025),
temp_97.5 = quantile(sst, 0.975),
temp_range = (temp_97.5-temp_2.5),
.groups = "keep")
View(species_niche_size)
hist( occ_clean %>% drop_na(sst) %>% drop_na(sal) %>%filter(specis = "Penaeus setiferus") %>% select(sst))
hist( occ_clean %>% drop_na(sst) %>% drop_na(sal) %>%filter(specis == "Penaeus setiferus") %>% select(sst))
hist( occ_clean %>% drop_na(sst) %>% drop_na(sal) %>%filter(species == "Penaeus setiferus") %>% select(sst))
shrimpsst<-occ_clean %>% drop_na(sst) %>% drop_na(sal) %>%filter(species == "Penaeus setiferus") %>% select(sst)
hist( shrimpsst)
shrimpsst
hist( shrimpsst$sst)
